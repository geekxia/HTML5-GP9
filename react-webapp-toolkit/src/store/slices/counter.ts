// createAsyncThunk()用于创建异步的action
// createSlice()用于创建子切片（子store）
import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'
import { fetchCount } from '@/api'

export interface CounterState {
  value: number;
  status: 'idle' | 'loading' | 'failed';
}

// 子store的初始化状态（状态管理变量）
const initialState: CounterState = {
  value: 0,
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

// 定义异步的action生成器方法
// createAsyncThunk(type: 'type', payload: '与后端交互的function')
// 这个方法是给页面用的：dispatch(incrementAsync(...))
export const incrementAsync = createAsyncThunk(
  'counter/fetchCount',
  // 这个方法的参数，就是调接口所需要的入参（payload）
  async (amount?: number) => {
    // 一定要写成同步代码，取出后端返回值！！
    const response = await fetchCount(amount);
    // The value we return becomes the `fulfilled` action payload
    // 返回后端数据，给extraReducers它使用（addCase）
    return response.data;
  }
);

// 定义子store
export const counterSlice = createSlice({
  // 子store的命名空间
  name: 'counter',
  // 初始化状态
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  // 同步的action生成器方法（相当于Vuex中的mutations）
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action: PayloadAction<number>) => {
      state.value += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // 异步的action生成器方法（相当于Vuex中的actions）
  extraReducers: (builder) => {
    builder
      // .addCase(incrementAsync.pending, (state) => {
      //   state.status = 'loading';
      // })
      // .addCase(incrementAsync.rejected, (state) => {
      //   state.status = 'failed';
      // })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        // 取出后端返回的数据，更新到store中去
        state.value += action.payload;
      })
  },
})

// 意思是把slice中同步的action方法抛出去
export const { increment, decrement, incrementByAmount } = counterSlice.actions

// 抛出子reducer，用于在根store进行合并！
export default counterSlice.reducer
